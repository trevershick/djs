.\"t
.\" Automatically generated by Pandoc 2.0.5
.\"
.TH "djs" "1" "" "Version 0.4.0" ""
.hy
.SH NAME
.PP
\f[B]djs\f[] \- download files from Jenkins
.SH SYNOPSIS
.PP
\f[B]djs\f[] [\f[B]\-nhqVv\f[]] [\f[B]\-u\f[] url] [\f[B]\-e\f[] path]
[\f[B]\-b\f[] base] [\f[B]\-j\f[] build] [\f[B]\-d\f[] destination]
[\f[B]\-p\f[] project] [\f[B]\-s\f[] solution] [\f[B]\-S\f[]
solution_filter] [\f[B]\-D\f[] \f[I]destination\-template\f[]]
.SH DESCRIPTION
.PP
This manual page describes the \f[B]djs\f[] utility.
It has been built to work with Jenkins when using the \f[B]Folders\f[]
plugin and expects a hierarchical folder setup like:
.PP
\f[B]/Base/Project/Branch\f[]
.PP
\f[B]Base\f[] can contain zero or more elements like
\f[B]/MyCorp/job/GroupA\f[].
.PP
\f[B]djs\f[] strings together the parameters provided to form API
requests to Jenkins to locate builds and artifacts.
If you have a non\-standard (from djs' perspective) it might take a
little experimentation to get your setup configured correctly.
.PP
It's easy to do this using the \f[B]\-n\f[](dry\-run) and
\f[B]\-v\f[](verbose) options on the command line.
Once you've determined what your proper and path are, add them to your
\f[I]~/.djsrc\f[] file in the following fashion:
.IP
.nf
\f[C]
url\ =\ "http://myjenkins.server:8080"
base\ =\ "job/MyTopLevel"
\f[]
.fi
.PP
Once they're in \f[I]~/.djsrc\f[] you'll not need to set them again.
You can also specify the \f[B]\[en]branch\f[] and \f[B]\[en]project\f[]
and \f[B]\[en]build\f[] if you want but if you execute \f[B]djs\f[] from
within a local \f[I]git\f[] repo, it will \f[I]guess\f[] setting
\f[B]project\f[] to the current git project directory and
\f[B]branch\f[] to the current \f[I]git\f[] branch.
It will also default \f[B]build\f[] to \f[I]lastSuccessfulBuild\f[] and
utilizing the configuration it already has, it will interrogate Jenkins
for the actual build number.
The only thing left to do is to specify the file name to download via
\f[B]\[en]solution\f[].
It is a common pattern to specify solution in the \f[I]git\f[] project
repository in the following fashion:
.IP
.nf
\f[C]
solution\ =\ "myfile.xml"
\f[]
.fi
.PP
Once this is set, \f[B]djs\f[] will combine \f[B]./.djsrc\f[] with the
settings in \f[B]~/.djsrc\f[] and any command line options to form a
full artifact download URL and it will proceed to download the file and
save it in \f[B]\[en]destination\f[].
.SS FLAGS
.TP
.B \-n, \[en]dry\-run
If set to true, nothing will be downloaded.
.RS
.RE
.TP
.B \-h, \[en]help
Prints help information
.RS
.RE
.TP
.B \-q, \[en]quiet
Turns off output
.RS
.RE
.TP
.B \-V, \[en]version
Prints version information
.RS
.RE
.TP
.B \-v, \[en]verbose
If set to true, extra information will be sent to the console
.RS
.RE
.SS OPTIONS
.TP
.B \-u, \-\-url \f[I]jenkins\-url\f[]
Use \f[I]jenkins\-url\f[] to contact the Jenkins server.
This should NOT include any trailing slashes.
An example of this is \f[I]http://myjenkins.com:8080\f[]
.RS
.RE
.TP
.B \-e, \-\-base \f[I]path\f[]
Use \f[I]path\f[] as the base path which is appended onto the
\f[I]jenkins\-url\f[] which forms the first part of the full Jenkins
URLs used to interrogate Jenkins for build information and download
files (ex.
if \f[I]path\f[]=\f[B]job/MyCorp\f[]
http://jenkins.com/\f[B]job/MyCorp\f[]/job/Project/job/\&...)
.RS
.RE
.TP
.B \-p, \-\-project \f[I]project\f[]
Use \f[I]project\f[] in the Jenkins URL paths (ex.
\f[I]project\f[]=\f[B]MyProject\f[]
http://jenkins.com/BasePath/job/\f[B]MyProject\f[]/job/\&...)
.RS
.RE
.TP
.B \-b, \-\-branch \f[I]branch\f[]
Use \f[I]branch\f[] to locate the artifact.
This is used in the construction of the URLs used to interrogate Jenkins
(ex.
if \f[I]branch\f[]=x,
http://jenkins.com/BasePath/job/Project/job/\f[B]x\f[]/\&...)
.RS
.RE
.TP
.B \-j, \-\-build \f[I]build\-specifier\f[]
Use \f[I]build\-specifier\f[] to locate the job from which to download
artifacts.
\f[I]build\-specifier\f[] may be a number or any of the following
symbolic specifiers:
.RS
.PP
\f[B]lastSuccessfulBuild\f[] \- interrogate Jenkins for the last
successful build of the given \f[I]branch\f[] and \f[I]project\f[].
Once resolved, the \f[I]build\f[] will be internally updated to that
build number.
.PP
\f[B]lastKeepForever\f[] \- locate the last build that is being `kept
forever'
.PP
\f[B]latest\f[] \- the latest build failure or not
.RE
.TP
.B \-s, \-\-solution \f[I]solution\f[]
Specifies the file to locate in Jenkins and download (ex.
MySolution.xml)
.RS
.RE
.TP
.B \-S, \-\-solution\-filter \f[I]filter\f[]
Use \f[I]filter\f[] to disambiguate between artifacts in Jenkins.
If more than one \f[I]solution\f[] exists in the artifacts of the
specific \f[I]build\f[] then the relative path of the artifact will be
inspected to find a match for \f[I]filter\f[].
.RS
.RE
.TP
.B \-d, \-\-destination \f[I]destination\f[]
Use \f[I]destination\f[] as the location to which files should be
downloaded.
If the location is not a directory then it's taken to be a file name and
the artifact will be downloaded to \f[I]destination\f[] irrespective of
the artifact name, build, branch or any other information.
.RS
.RE
.TP
.B \-D, \-\-destination\-template \f[I]template\f[]
Use \f[I]template\f[] to format the output filename.
See the \f[B]Destination Template\f[] section.
.RS
.RE
.SS Destination Path
.PP
By default djs will download your file to the current directory unless
otherwise specified by \f[C]destination\f[] or \f[C]\-d\f[] which can be
either a directory or a filename.
If \f[C]destination\f[] points to a directory then djs will rename the
downloaded file with the following template:
.IP
.nf
\f[C]
\ \ {project}\-{branch}\-{build}.{extension}\ #yields\ myproj\-mybranch\-15.xml
\f[]
.fi
.PP
or if your branch name \[lq]djs\-123\[rq] contains the project name
\[lq]djs\[rq] then
.IP
.nf
\f[C]
\ \ {branch}\-{build}.{extension}\ #yields\ djs\-15.xml
\f[]
.fi
.PP
You can customize this via the \f[C]destination_template\f[]
configuration value in your .djsrc file or via the \f[C]\-D\f[] command
line option.
The value is a string that contains format specifiers.
Examples are shown below.
.IP
.nf
\f[C]
\ \ {project}\-{solution_basename}\-{solution_filter}\-{branch}\-{build}\-{build_abbreviation}.{solution_extension}
\ \ #yields
\ \ ./proj1\-solution\-filter1\-branch1\-latest\-lt.txt"
\f[]
.fi
.SS Format Specifiers
.PP
All format specifiers come in three flavors.
Lowercase, Uppercase and Preserve Case.
Shown below are the output values for various specifiers and the input
value \[lq]Project1\[rq].
.PP
.TS
tab(@);
l l l.
T{
Input
T}@T{
Format
T}@T{
Output
T}
_
T{
Project1
T}@T{
project
T}@T{
project1
T}
T{
Project1
T}@T{
Project
T}@T{
Project1
T}
T{
Project1
T}@T{
PROJECT
T}@T{
PROJECT1
T}
.TE
.PP
\f[B]All Specifiers\f[]
.PP
All the specifiers below are available in the three variants mentioned
above, Lowercase, Uppercase and Preserve Case
.PP
.TS
tab(@);
lw(30.4n) lw(39.6n).
T{
Specifier
T}@T{
Example Value
T}
_
T{
project
T}@T{
project1
T}
T{
solution
T}@T{
myfile.xml
T}
T{
solution_basename
T}@T{
myfile
T}
T{
solution_extension
T}@T{
xml
T}
T{
solution_filter
T}@T{
build\-test
T}
T{
branch
T}@T{
1_fix_caps
T}
T{
branch_nums
T}@T{
1
T}
T{
branch_alphas
T}@T{
fixcaps
T}
T{
build
T}@T{
15
T}
T{
build_abbreviation
T}@T{
ls (ls=lastSuccessfulBuild, lt=latest, kf=lastKeepForever)
T}
.TE
.SH FILES
.TP
.B \f[I]~/.djsrc\f[]
Per\-user default file.
.RS
.RE
.TP
.B \f[I]./.djsrc\f[]
Per directory defaults.
.RS
.RE
.SH BUGS
.PP
See GitHub Issues: <https://github.com/trevershick/djs/issues>
.SH AUTHOR
.PP
Trever Shick <trever.shick@tanium.com>
